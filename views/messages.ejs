<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="/socket.io/socket.io.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">
    <style>
        body { font-family: 'Poppins', sans-serif; }
        html { background-color: #0f172a; }
        /* Custom scrollbar for a better look */
        #messages-container::-webkit-scrollbar { width: 8px; }
        #messages-container::-webkit-scrollbar-track { background: transparent; }
        #messages-container::-webkit-scrollbar-thumb { background-color: #475569; border-radius: 20px; border: 3px solid #1e293b; }
    </style>
    <title>Messages - Alumni Connect</title>
</head>
<body class="bg-slate-900 text-white min-h-screen">
    <%- include('partials/navbar') %>

    <div class="container mx-auto p-4 md:p-8" style="height: calc(100vh - 80px);">
        <div class="flex h-full bg-slate-800/50 backdrop-blur-lg border border-slate-700 rounded-2xl shadow-2xl">
            <div class="w-1/4 bg-slate-800/70 p-4 rounded-l-2xl border-r border-slate-700">
                <h2 class="text-xl font-bold mb-4 text-white">Conversations</h2>
                <ul id="connections-list" class="space-y-2 overflow-y-auto h-[95%]">
                    </ul>
            </div>

            <div class="w-3/4 p-6 flex flex-col h-full">
                <div class="flex items-center gap-4 border-b border-slate-700 pb-4 mb-4">
                    <img id="chat-partner-avatar" class="w-12 h-12 rounded-full object-cover" src="https://ui-avatars.com/api/?name=?&background=1e40af&color=fff" alt="">
                    <h2 class="text-2xl font-bold text-white">Chat with <span id="chat-partner-name">...</span></h2>
                </div>
                
                <div id="messages-container" class="flex-1 overflow-y-auto mb-4 p-4 rounded-lg">
                    </div>
                
                <form id="message-form" class="flex">
                    <input type="text" id="message-input" placeholder="Type a message..." class="flex-1 p-3 bg-slate-700 text-white rounded-l-lg focus:outline-none focus:ring-2 focus:ring-sky-500">
                    <button type="submit" class="bg-sky-600 text-white px-6 rounded-r-lg hover:bg-sky-700 transition-colors duration-200">
                        Send
                    </button>
                </form>
            </div>
        </div>
    </div>

    <script>
        // All of your existing JavaScript functionality is preserved here.
        const otherUserId = "<%= typeof otherUserId !== 'undefined' ? otherUserId : '' %>";
        let currentChatPartnerId = otherUserId;
        let currentUserId = null;
        const chatPartnerNameEl = document.getElementById('chat-partner-name');
        const chatPartnerAvatarEl = document.getElementById('chat-partner-avatar');
        const messagesContainer = document.getElementById('messages-container');
        const connectionsListEl = document.getElementById('connections-list');
        const messageForm = document.getElementById('message-form');
        const messageInput = document.getElementById('message-input');
        const socket = io();
        async function fetchCurrentUserId(){try{const e=await fetch("/api/user/id");if(!e.ok)throw new Error("Failed to fetch current user ID");const t=await e.json();currentUserId=t.userId,socket.emit("join",currentUserId)}catch(e){console.error(e)}}
        async function fetchMessageThreads(){try{const e=await fetch("/api/messages/threads");if(!e.ok)throw new Error("Failed to fetch connections");const t=await e.json();return connectionsListEl.innerHTML="",t.forEach(e=>{const s=e.partnerId.toString()===currentChatPartnerId.toString()?"bg-sky-600":"bg-slate-700",a=`\n                        <li>\n                            <a href="#" onclick="event.preventDefault(); loadChat('${e.partnerId}', '${e.partnerName}', '${e.partnerProfilePic}')" class="block p-3 ${s} rounded-md hover:bg-slate-600 transition-colors duration-200 flex items-center gap-3">\n                                <img class="w-10 h-10 rounded-full object-cover" src="${e.partnerProfilePic||`https://ui-avatars.com/api/?name=${encodeURIComponent(e.partnerName)}&background=1e40af&color=fff`}" alt="${e.partnerName}" />\n                                <span class="font-semibold">${e.partnerName}</span>\n                            </a>\n                        </li>\n                    `;connectionsListEl.innerHTML+=a}),t}catch(e){return console.error(e),[]}}
        function createMessageElement(e){const t=e.sender.toString()===currentUserId.toString(),s=document.createElement("div");return s.className=`w-full flex ${t?"justify-end":"justify-start"} mb-3`,s.innerHTML=`<div class="max-w-xs lg:max-w-md p-3 rounded-xl ${t?"bg-sky-600":"bg-slate-600"}">${e.content}</div>`,s}
        async function loadMessages(e){try{const t=await fetch(`/api/messages/${e}`);if(!t.ok)throw new Error("Failed to load messages");const s=await t.json();messagesContainer.innerHTML="",s.forEach(e=>{messagesContainer.appendChild(createMessageElement(e))}),messagesContainer.scrollTop=messagesContainer.scrollHeight}catch(e){console.error(e)}}
        async function loadChat(e,t,s){currentChatPartnerId=e,chatPartnerNameEl.textContent=t,chatPartnerAvatarEl.src=s||`https://ui-avatars.com/api/?name=${encodeURIComponent(t)}&background=1e40af&color=fff`,history.pushState(null,"",`/messages/${e}`),await loadMessages(e),await fetchMessageThreads()}
        messageForm.addEventListener("submit",e=>{e.preventDefault();const t=messageInput.value.trim();if(t&&currentChatPartnerId&&currentUserId){const e={senderId:currentUserId,receiverId:currentChatPartnerId,content:t};socket.emit("privateMessage",e),messageInput.value=""}}),socket.on("privateMessage",e=>{(e.sender===currentUserId&&e.receiver===currentChatPartnerId||e.sender===currentChatPartnerId&&e.receiver===currentUserId)&&(messagesContainer.appendChild(createMessageElement(e)),messagesContainer.scrollTop=messagesContainer.scrollHeight)}),document.addEventListener("DOMContentLoaded",async()=>{await fetchCurrentUserId();const e=await fetchMessageThreads();if(otherUserId){const t=e.find(e=>e.partnerId.toString()===otherUserId.toString());if(t)await loadChat(t.partnerId,t.partnerName,t.partnerProfilePic);else try{const e=await fetch(`/api/user/${otherUserId}/details`);if(!e.ok)throw new Error("Could not find user details");const t=await e.json();await loadChat(t._id,t.name,t.profilePictureUrl)}catch(e){console.error(e),chatPartnerNameEl.textContent="Unknown User"}}});
    </script>
</body>
</html>